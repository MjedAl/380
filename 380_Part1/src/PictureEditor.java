
import cpit380practice.Picture;
import cpit380practice.PictureFrame;
import cpit380practice.Pixel;
import cpit380practice.SimplePicture;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Scanner;
import java.util.function.IntPredicate;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import static javax.swing.text.StyleConstants.Size;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Size;
import org.opencv.highgui.HighGui;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

/**
 *
 * @author Mjed
 */
public class PictureEditor extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public PictureEditor() {
        initComponents();
        rotatePanel.setVisible(false);
        ReflectionPanel.setVisible(false);
        CopmutingPanel.setVisible(false);
        FiltersPanel.setVisible(false);
        ConvertionPanel.setVisible(false);
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        collage = new javax.swing.JButton();
        cropImg = new javax.swing.JButton();
        Blend = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        scaleSlider = new javax.swing.JSlider();
        targetLabel = new javax.swing.JLabel();
        imgLabel = new javax.swing.JLabel();
        menuPanel = new javax.swing.JPanel();
        RotaionMenu = new javax.swing.JButton();
        ReflectionMenu = new javax.swing.JButton();
        rotatePanel = new javax.swing.JPanel();
        Rotateleft = new javax.swing.JButton();
        RotateRight = new javax.swing.JButton();
        Rotate180 = new javax.swing.JButton();
        ReflectionPanel = new javax.swing.JPanel();
        VerticalReflection = new javax.swing.JButton();
        HorizontalReflection = new javax.swing.JButton();
        DiaginalRef_d1_T2B = new javax.swing.JButton();
        DiaginalRef_d2_T2B = new javax.swing.JButton();
        DiaginalRef_d1_B2T = new javax.swing.JButton();
        DiaginalRef_d2_B2T = new javax.swing.JButton();
        ComputingMenu = new javax.swing.JButton();
        FiltersMenu = new javax.swing.JButton();
        CopmutingPanel = new javax.swing.JPanel();
        ComputeHistograms = new javax.swing.JButton();
        computeBrightness = new javax.swing.JButton();
        computeContrast = new javax.swing.JButton();
        exportHistogram = new javax.swing.JButton();
        importHistogram = new javax.swing.JButton();
        FiltersPanel = new javax.swing.JPanel();
        boxFilter = new javax.swing.JButton();
        GaussianFilter = new javax.swing.JButton();
        LaplacianFilter = new javax.swing.JButton();
        minFilter = new javax.swing.JButton();
        maxFilter = new javax.swing.JButton();
        medianFilter = new javax.swing.JButton();
        weightedMedianFilter = new javax.swing.JButton();
        ConvertionPanel = new javax.swing.JPanel();
        ConvertToHSV = new javax.swing.JButton();
        grayTobianry = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        convertionMenu = new javax.swing.JButton();
        clearImage = new javax.swing.JButton();
        chooseImg = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        redSlider = new javax.swing.JSlider();
        greenSlider = new javax.swing.JSlider();
        blueSlider = new javax.swing.JSlider();
        redeye = new javax.swing.JToggleButton();
        ContsPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        ContsSlider = new javax.swing.JSlider();
        Background = new javax.swing.JButton();
        edgeDetecLap = new javax.swing.JButton();
        edgeDetecButton1 = new javax.swing.JButton();
        edgeDetecLap1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setName("Editor"); // NOI18N

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));

        collage.setText("Collage");
        collage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collageActionPerformed(evt);
            }
        });

        cropImg.setText("Crop image");
        cropImg.setToolTipText("");
        cropImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropImgActionPerformed(evt);
            }
        });

        Blend.setText("Blend");
        Blend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlendActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setPreferredSize(new java.awt.Dimension(350, 150));

        jLabel4.setText("Scale:");

        scaleSlider.setMaximum(4);
        scaleSlider.setToolTipText("");
        scaleSlider.setValue(2);
        scaleSlider.setEnabled(false);
        scaleSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                scaleSliderFocusLost(evt);
            }
        });
        scaleSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                scaleSliderMouseReleased(evt);
            }
        });
        scaleSlider.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                scaleSliderKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(scaleSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(scaleSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        targetLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        targetLabel.setText("Missing an image");

        imgLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgLabel.setText("Missing an image");

        menuPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        RotaionMenu.setBackground(Color.decode("#264653"));
        RotaionMenu.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        RotaionMenu.setForeground(new java.awt.Color(255, 255, 255));
        RotaionMenu.setText("Rotate");
        RotaionMenu.setToolTipText("");
        RotaionMenu.setBorder(null);
        RotaionMenu.setMargin(new java.awt.Insets(0, 0, 0, 0));
        RotaionMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RotaionMenuActionPerformed(evt);
            }
        });

        ReflectionMenu.setBackground(Color.decode("#2a9d8f"));
        ReflectionMenu.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ReflectionMenu.setForeground(new java.awt.Color(255, 255, 255));
        ReflectionMenu.setText("Reflection");
        ReflectionMenu.setToolTipText("");
        ReflectionMenu.setBorder(null);
        ReflectionMenu.setMargin(new java.awt.Insets(0, 0, 0, 0));
        ReflectionMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReflectionMenuActionPerformed(evt);
            }
        });

        rotatePanel.setOpaque(false);

        Rotateleft.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Rotateleft.setText("Rotate left");
        Rotateleft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RotateleftActionPerformed(evt);
            }
        });

        RotateRight.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        RotateRight.setText("Rotate Right");
        RotateRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RotateRightActionPerformed(evt);
            }
        });

        Rotate180.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Rotate180.setText("Rotate 180");
        Rotate180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Rotate180ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rotatePanelLayout = new javax.swing.GroupLayout(rotatePanel);
        rotatePanel.setLayout(rotatePanelLayout);
        rotatePanelLayout.setHorizontalGroup(
            rotatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rotatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rotatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Rotate180, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RotateRight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Rotateleft, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        rotatePanelLayout.setVerticalGroup(
            rotatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rotatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Rotateleft)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RotateRight)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Rotate180)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ReflectionPanel.setOpaque(false);

        VerticalReflection.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        VerticalReflection.setText("Vertical Reflection");
        VerticalReflection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerticalReflectionActionPerformed(evt);
            }
        });

        HorizontalReflection.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        HorizontalReflection.setText("Horizontal Reflection");
        HorizontalReflection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HorizontalReflectionActionPerformed(evt);
            }
        });

        DiaginalRef_d1_T2B.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DiaginalRef_d1_T2B.setText("Diagonal Reflection D1 (Top to bottom)");
        DiaginalRef_d1_T2B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiaginalRef_d1_T2BActionPerformed(evt);
            }
        });

        DiaginalRef_d2_T2B.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DiaginalRef_d2_T2B.setText("Diagonal Reflection D2 (Top to bottom)");
        DiaginalRef_d2_T2B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiaginalRef_d2_T2BActionPerformed(evt);
            }
        });

        DiaginalRef_d1_B2T.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DiaginalRef_d1_B2T.setText("Diagonal Reflection D1 (Bottom to top)");
        DiaginalRef_d1_B2T.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiaginalRef_d1_B2TActionPerformed(evt);
            }
        });

        DiaginalRef_d2_B2T.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DiaginalRef_d2_B2T.setText("Diagonal Reflection D2 (Bottom to top)");
        DiaginalRef_d2_B2T.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiaginalRef_d2_B2TActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ReflectionPanelLayout = new javax.swing.GroupLayout(ReflectionPanel);
        ReflectionPanel.setLayout(ReflectionPanelLayout);
        ReflectionPanelLayout.setHorizontalGroup(
            ReflectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReflectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ReflectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HorizontalReflection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DiaginalRef_d1_T2B, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DiaginalRef_d2_T2B, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DiaginalRef_d1_B2T, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DiaginalRef_d2_B2T, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(VerticalReflection, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        ReflectionPanelLayout.setVerticalGroup(
            ReflectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReflectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(VerticalReflection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HorizontalReflection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DiaginalRef_d1_T2B)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DiaginalRef_d1_B2T)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DiaginalRef_d2_T2B)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DiaginalRef_d2_B2T)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ComputingMenu.setBackground(Color.decode("#f4a261"));
        ComputingMenu.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ComputingMenu.setForeground(new java.awt.Color(255, 255, 255));
        ComputingMenu.setText("Computing");
        ComputingMenu.setToolTipText("");
        ComputingMenu.setBorder(null);
        ComputingMenu.setMargin(new java.awt.Insets(0, 0, 0, 0));
        ComputingMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComputingMenuActionPerformed(evt);
            }
        });

        FiltersMenu.setBackground(Color.decode("#e76f51"));
        FiltersMenu.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        FiltersMenu.setForeground(new java.awt.Color(255, 255, 255));
        FiltersMenu.setText("Filters");
        FiltersMenu.setToolTipText("");
        FiltersMenu.setBorder(null);
        FiltersMenu.setMargin(new java.awt.Insets(0, 0, 0, 0));
        FiltersMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FiltersMenuActionPerformed(evt);
            }
        });

        CopmutingPanel.setOpaque(false);

        ComputeHistograms.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ComputeHistograms.setText("Compute Histograms");
        ComputeHistograms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComputeHistogramsActionPerformed(evt);
            }
        });

        computeBrightness.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        computeBrightness.setText("Compute Brightness");
        computeBrightness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeBrightnessActionPerformed(evt);
            }
        });

        computeContrast.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        computeContrast.setText("Compute Contrast");
        computeContrast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeContrastActionPerformed(evt);
            }
        });

        exportHistogram.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        exportHistogram.setText("Export Histogram");
        exportHistogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportHistogramActionPerformed(evt);
            }
        });

        importHistogram.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        importHistogram.setText("Import Histogram");
        importHistogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importHistogramActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CopmutingPanelLayout = new javax.swing.GroupLayout(CopmutingPanel);
        CopmutingPanel.setLayout(CopmutingPanelLayout);
        CopmutingPanelLayout.setHorizontalGroup(
            CopmutingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CopmutingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CopmutingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(computeContrast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exportHistogram, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(importHistogram, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(computeBrightness, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ComputeHistograms, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        CopmutingPanelLayout.setVerticalGroup(
            CopmutingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CopmutingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ComputeHistograms)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportHistogram)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(importHistogram)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(computeBrightness)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(computeContrast)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        FiltersPanel.setOpaque(false);

        boxFilter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        boxFilter.setText("Box filter");
        boxFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxFilterActionPerformed(evt);
            }
        });

        GaussianFilter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        GaussianFilter.setText("Gaussian filters");
        GaussianFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GaussianFilterActionPerformed(evt);
            }
        });

        LaplacianFilter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        LaplacianFilter.setText("Laplacian filters");
        LaplacianFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LaplacianFilterActionPerformed(evt);
            }
        });

        minFilter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        minFilter.setText("Min filter");
        minFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minFilterActionPerformed(evt);
            }
        });

        maxFilter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        maxFilter.setText("Max filter");
        maxFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxFilterActionPerformed(evt);
            }
        });

        medianFilter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        medianFilter.setText("Median filter");
        medianFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medianFilterActionPerformed(evt);
            }
        });

        weightedMedianFilter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        weightedMedianFilter.setText("Weighted Median filter");
        weightedMedianFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightedMedianFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FiltersPanelLayout = new javax.swing.GroupLayout(FiltersPanel);
        FiltersPanel.setLayout(FiltersPanelLayout);
        FiltersPanelLayout.setHorizontalGroup(
            FiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FiltersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boxFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(GaussianFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LaplacianFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(FiltersPanelLayout.createSequentialGroup()
                        .addComponent(medianFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(weightedMedianFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(FiltersPanelLayout.createSequentialGroup()
                        .addComponent(minFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(maxFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        FiltersPanelLayout.setVerticalGroup(
            FiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FiltersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boxFilter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GaussianFilter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LaplacianFilter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minFilter)
                    .addComponent(maxFilter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(medianFilter)
                    .addComponent(weightedMedianFilter))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ConvertionPanel.setOpaque(false);

        ConvertToHSV.setText("Convert to HSV");
        ConvertToHSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConvertToHSVActionPerformed(evt);
            }
        });

        grayTobianry.setText("Convert gray to binary");
        grayTobianry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grayTobianryActionPerformed(evt);
            }
        });

        jButton1.setText("Convert to gray scale image");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConvertToGrayScale(evt);
            }
        });

        javax.swing.GroupLayout ConvertionPanelLayout = new javax.swing.GroupLayout(ConvertionPanel);
        ConvertionPanel.setLayout(ConvertionPanelLayout);
        ConvertionPanelLayout.setHorizontalGroup(
            ConvertionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConvertionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ConvertionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(grayTobianry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ConvertToHSV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        ConvertionPanelLayout.setVerticalGroup(
            ConvertionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConvertionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(grayTobianry)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ConvertToHSV)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        convertionMenu.setBackground(Color.decode("#4E0E2E"));
        convertionMenu.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        convertionMenu.setForeground(new java.awt.Color(255, 255, 255));
        convertionMenu.setText("Converion");
        convertionMenu.setToolTipText("");
        convertionMenu.setActionCommand("Converion");
        convertionMenu.setBorder(null);
        convertionMenu.setMargin(new java.awt.Insets(0, 0, 0, 0));
        convertionMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertionMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rotatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FiltersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CopmutingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ReflectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ConvertionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(menuPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(RotaionMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(ReflectionMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(ComputingMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(FiltersMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(convertionMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ReflectionMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComputingMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FiltersMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(convertionMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RotaionMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(rotatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ReflectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CopmutingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FiltersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ConvertionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        clearImage.setText("Clear");
        clearImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearImageActionPerformed(evt);
            }
        });

        chooseImg.setText("Choose an image");
        chooseImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseImgActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setPreferredSize(new java.awt.Dimension(350, 150));

        jLabel1.setText("Red:");

        jLabel2.setText("Green:");

        jLabel3.setText("Blue:");

        redSlider.setToolTipText("");
        redSlider.setEnabled(false);
        redSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                redSliderFocusLost(evt);
            }
        });
        redSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                redSliderMouseReleased(evt);
            }
        });
        redSlider.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redSliderKeyReleased(evt);
            }
        });

        greenSlider.setEnabled(false);
        greenSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                greenSliderMouseReleased(evt);
            }
        });

        blueSlider.setEnabled(false);
        blueSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                blueSliderMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(greenSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                    .addComponent(blueSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(redSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(redSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(10, 10, 10))
                    .addComponent(greenSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(blueSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        redeye.setText("Red Eye ");
        redeye.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redeyeActionPerformed(evt);
            }
        });

        ContsPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ContsPanel.setPreferredSize(new java.awt.Dimension(350, 150));

        jLabel5.setText("Contrast");

        ContsSlider.setMaximum(4);
        ContsSlider.setToolTipText("");
        ContsSlider.setValue(2);
        ContsSlider.setEnabled(false);
        ContsSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ContsSliderFocusLost(evt);
            }
        });
        ContsSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ContsSliderMouseReleased(evt);
            }
        });
        ContsSlider.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ContsSliderKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout ContsPanelLayout = new javax.swing.GroupLayout(ContsPanel);
        ContsPanel.setLayout(ContsPanelLayout);
        ContsPanelLayout.setHorizontalGroup(
            ContsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(ContsSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                .addContainerGap())
        );
        ContsPanelLayout.setVerticalGroup(
            ContsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ContsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(ContsSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Background.setText("Background");
        Background.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackgroundActionPerformed(evt);
            }
        });

        edgeDetecLap.setText("Edge detection (Laplacian)");
        edgeDetecLap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeDetecLapActionPerformed(evt);
            }
        });

        edgeDetecButton1.setText("Edge detection");
        edgeDetecButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeDetecButton1ActionPerformed(evt);
            }
        });

        edgeDetecLap1.setText("Edge detection (Prewett)");
        edgeDetecLap1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeDetecLap1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(689, 689, 689)
                        .addComponent(chooseImg, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearImage, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(redeye, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(edgeDetecButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Background, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(ContsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE))
                            .addComponent(collage, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Blend, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cropImg, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(edgeDetecLap, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(edgeDetecLap1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(imgLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 645, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(targetLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 645, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(36, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(713, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseImg)
                    .addComponent(clearImage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ContsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(edgeDetecButton1)
                            .addComponent(redeye))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(edgeDetecLap)
                            .addComponent(cropImg))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Blend, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(edgeDetecLap1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Background, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(collage)
                        .addGap(73, 73, 73))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(imgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(targetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(168, Short.MAX_VALUE))))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(164, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ContsSliderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ContsSliderKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_ContsSliderKeyReleased

    private void ContsSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ContsSliderMouseReleased
        // TODO add your handling code here:
        double silderValue = ContsSlider.getValue();
        pic = pic.Contrast(pic, silderValue);

        ImageIcon icon = new ImageIcon(pic.getImage());
        updateIMG();
    }//GEN-LAST:event_ContsSliderMouseReleased

    private void ContsSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ContsSliderFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_ContsSliderFocusLost

    private void blueSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_blueSliderMouseReleased
        // TODO add your handling code here:
        if (pic != null) {
            B_Value = blueSlider.getValue();
            updateColors();
        }
    }//GEN-LAST:event_blueSliderMouseReleased

    private void greenSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_greenSliderMouseReleased
        // TODO add your handling code here:
        if (pic != null) {
            G_Value = greenSlider.getValue();
            updateColors();
        }
    }//GEN-LAST:event_greenSliderMouseReleased

    private void redSliderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redSliderKeyReleased

    }//GEN-LAST:event_redSliderKeyReleased

    private void redSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_redSliderMouseReleased
        if (pic != null) {
            R_Value = redSlider.getValue();
            updateColors();
        }
    }//GEN-LAST:event_redSliderMouseReleased

    private void redSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_redSliderFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_redSliderFocusLost

    private void chooseImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseImgActionPerformed
        // TODO add your handling code here:

        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setDialogTitle("Select an image");
        jfc.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("PNG or JPG", "png", "jpg");
        jfc.addChoosableFileFilter(filter);

        int returnValue = jfc.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            System.out.println(jfc.getSelectedFile().getPath() + " is selected");
            imgName = jfc.getSelectedFile().getPath();
            redSlider.setEnabled(true);
            greenSlider.setEnabled(true);
            blueSlider.setEnabled(true);
            scaleSlider.setEnabled(true);
            ContsSlider.setEnabled(true);
            redSlider.setValue(50);
            greenSlider.setValue(50);
            blueSlider.setValue(50);
            R_Value = -1;
            G_Value = -1;
            B_Value = -1;
            pic = new Picture(imgName);
            sourcePicture = new Picture(imgName);
            Image img = (pic.getImage()).getScaledInstance(imgLabel.getWidth(), imgLabel.getHeight(), Image.SCALE_SMOOTH);;
            imgLabel.setText("");
            imgLabel.setIcon(new ImageIcon(img));
            updateIMG();
        }
    }//GEN-LAST:event_chooseImgActionPerformed

    private void clearImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearImageActionPerformed
        pic = new Picture(imgName);
        sourcePicture = new Picture(imgName);
        redSlider.setValue(50);
        greenSlider.setValue(50);
        blueSlider.setValue(50);
        R_Value = -1;
        G_Value = -1;
        B_Value = -1;
        updateIMG();
    }//GEN-LAST:event_clearImageActionPerformed

    private void convertionMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertionMenuActionPerformed
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            menuPanel.setBackground(convertionMenu.getBackground());
            rotatePanel.setVisible(false);
            ReflectionPanel.setVisible(false);
            CopmutingPanel.setVisible(false);
            FiltersPanel.setVisible(false);
            ConvertionPanel.setVisible(true);
        }        // TODO add your handling code here:

    }//GEN-LAST:event_convertionMenuActionPerformed

    // not completed
    private void ConvertToGrayScale(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConvertToGrayScale
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            Pixel[] pxl = pic.getPixels();
            for (int i = 0; i < pxl.length; i++) {
                //---- take all the vlaue of the color pxl Red , Green and blue for pxl .
                //---- and get the avg of them .
                int avg = (pxl[i].getRed() + pxl[i].getBlue() + pxl[i].getGreen()) / 3;
                //---- after that change the color to new color with value of avg in all pxl color
                pxl[i].setColor(new Color(avg, avg, avg));
            }
            updateIMG();
        }
    }//GEN-LAST:event_ConvertToGrayScale

    private void grayTobianryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grayTobianryActionPerformed
        // TODO add your handling code here:
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String ThresholdValue = JOptionPane.showInputDialog(null, "Please Enter the size: ");
            try {
                // **get the value from the histogram**
                int threadshold = Integer.parseInt(ThresholdValue);
                pic = pic.gray2Binary(threadshold);
                updateIMG();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_grayTobianryActionPerformed

    private void ConvertToHSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConvertToHSVActionPerformed
        // TODO add your handling code here:
        if (pic != null) {
            Pixel[] pxs = pic.getPixels();

            for (int i = 0; i < pic.getWidth(); i++) {
                for (int j = 0; j < pic.getHeight(); j++) {
                    Color c = pic.getPixel(j, j).getColor();
                    float[] hsb = Color.RGBtoHSB(c.getRed(), c.getGreen(), c.getBlue(), null);
                    c = Color.getHSBColor(hsb[0], hsb[1], hsb[2]);
                    pic.getPixel(j, j).setColor(c);
                }
            }
            JOptionPane.showMessageDialog(null, "Convert to HSV", "Done", JOptionPane.INFORMATION_MESSAGE);
            updateIMG();
        }
    }//GEN-LAST:event_ConvertToHSVActionPerformed

    private void weightedMedianFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightedMedianFilterActionPerformed
        // TODO add your handling code here:
        //
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String size = JOptionPane.showInputDialog(null, "Please Enter the size of the filter please (one odd number only): ");
            try {
                int FilterSize = Integer.parseInt(size);
                if (FilterSize % 2 == 0) {
                    JOptionPane.showMessageDialog(null, "Fitler size should be odd", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                pic.MedianWeightedFilter(FilterSize);
                updateIMG();
            } catch (NumberFormatException e) {
                System.out.println(e);
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_weightedMedianFilterActionPerformed

    private void medianFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medianFilterActionPerformed

        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String size = JOptionPane.showInputDialog(null, "Please Enter the size of the filter please (one odd number only): ");
            try {
                int FilterSize = Integer.parseInt(size);
                if (FilterSize % 2 == 0) {
                    JOptionPane.showMessageDialog(null, "Fitler size should be odd", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                pic.MedianFilter(FilterSize);
                updateIMG();
            } catch (NumberFormatException e) {
                System.out.println(e);
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_medianFilterActionPerformed

    private void maxFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxFilterActionPerformed
        // TODO add your handling code here:
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String size = JOptionPane.showInputDialog(null, "Please Enter the size of the filter please (one odd number only): ");
            try {
                int FilterSize = Integer.parseInt(size);
                if (FilterSize % 2 == 0) {
                    JOptionPane.showMessageDialog(null, "Fitler size should be odd", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                pic.MaxFilter(FilterSize);
                updateIMG();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_maxFilterActionPerformed

    private void minFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minFilterActionPerformed
        // TODO add your handling code here:
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String size = JOptionPane.showInputDialog(null, "Please Enter the size of the filter please (one odd number only): ");
            try {
                int FilterSize = Integer.parseInt(size);
                if (FilterSize % 2 == 0) {
                    JOptionPane.showMessageDialog(null, "Fitler size should be odd", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                pic.MinFilter(FilterSize);
                updateIMG();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_minFilterActionPerformed

    private void LaplacianFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LaplacianFilterActionPerformed

        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String size = JOptionPane.showInputDialog(null, "Please Enter the size of the filter please (one odd number only): ");
            try {
                int FilterSize = Integer.parseInt(size);
                if (FilterSize % 2 == 0) {
                    JOptionPane.showMessageDialog(null, "Fitler size should be odd", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                pic.LaplacianFilter(FilterSize);
                updateIMG();
            } catch (NumberFormatException e) {
                System.out.println(e);
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_LaplacianFilterActionPerformed

    private void GaussianFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GaussianFilterActionPerformed
        // TODO add your handling code here:

        // G filter
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {

            // give user 3 option high middle low.
            Object[] options = {"LOW",
                "MIDDLE",
                "HIGH"};
            int choice = JOptionPane.showOptionDialog(this, "Please choose the important of the middle pixel", "Gaussuan filter option", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[2]);
            pic.gaussianFilter3x3(choice);
            System.out.println(choice);
            updateIMG();
        }
    }//GEN-LAST:event_GaussianFilterActionPerformed

    private void boxFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxFilterActionPerformed
        // TODO add your handling code here:
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String size = JOptionPane.showInputDialog(null, "Please Enter the size of the filter please (one odd number only): ");
            try {
                int FilterSize = Integer.parseInt(size);
                if (FilterSize % 2 == 0) {
                    JOptionPane.showMessageDialog(null, "Fitler size should be odd", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                pic.BoxFilter(FilterSize);
                updateIMG();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_boxFilterActionPerformed

    private void importHistogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importHistogramActionPerformed
        try {
            // TODO add your handling code here:

            JOptionPane.showMessageDialog(null, "Please choose the histogram txt", "File", JOptionPane.OK_OPTION);

            JFileChooser f = new JFileChooser();
            f.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            f.showSaveDialog(null);
            File export = f.getSelectedFile();

            Scanner input = new Scanner(export);
            Picture replot = new Picture(input.nextInt(), input.nextInt());

            Pixel_LL[] HistogramsRed = new Pixel_LL[256];
            Pixel_LL[] HistogramsGreen = new Pixel_LL[256];
            Pixel_LL[] HistogramsBlue = new Pixel_LL[256];
            int total;
            String color = input.next();
            System.out.println("Importing the color " + color);
            for (int i = 0; i < 256; i++) { // Reading all level 0 pixels from red
                total = input.nextInt();
                //System.out.println("Importing level " + i + " of " + color + " it has: " + total + " pixels");
                HistogramsRed[i] = new Pixel_LL(input, total);
            }
            color = input.next();
            System.out.println("Importing the color " + color);
            for (int i = 0; i < 256; i++) { // Reading all level 0 pixels from green
                total = input.nextInt();
                //System.out.println("Importing level " + i + " of " + color + " it has: " + total + " pixels");
                HistogramsGreen[i] = new Pixel_LL(input, total);
            }
            color = input.next();
            System.out.println("Importing the color " + color);
            for (int i = 0; i < 256; i++) { // Reading all level 0 pixels from blue
                total = input.nextInt();
                //System.out.println("Importing level " + i + " of " + color + " it has: " + total + " pixels");
                HistogramsBlue[i] = new Pixel_LL(input, total);
            }
            PixelLinkedList_node helpPtr = null;

            for (int i = 0; i < 256; i++) { // 0 - 256
                if (HistogramsRed[i].getHead() != null) {
                    helpPtr = HistogramsRed[i].getHead();
                    while (helpPtr != null) {
                        replot.getPixel(helpPtr.getX(), helpPtr.getY()).setRed(i);
                        helpPtr = helpPtr.getNext();
                    }
                }

                if (HistogramsGreen[i].getHead() != null) {
                    helpPtr = HistogramsGreen[i].getHead();
                    while (helpPtr != null) {
                        replot.getPixel(helpPtr.getX(), helpPtr.getY()).setGreen(i);
                        helpPtr = helpPtr.getNext();
                    }
                }

                if (HistogramsBlue[i].getHead() != null) {
                    helpPtr = HistogramsBlue[i].getHead();
                    while (helpPtr != null) {
                        replot.getPixel(helpPtr.getX(), helpPtr.getY()).setBlue(i);
                        helpPtr = helpPtr.getNext();
                    }
                }
            }
            System.out.println("DONE");
            replot.show();
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ERROR FILE IS NOT FOUND", "File", JOptionPane.OK_OPTION);
        } catch (Exception x) {
            JOptionPane.showMessageDialog(null, "ERROR", "EROR", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_importHistogramActionPerformed

    private void exportHistogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportHistogramActionPerformed

        // exporting the histogram to files
        Pixel_LL[][] Histograms = ComputeHistograms();
        // ask the user where to save it
        JFileChooser f = new JFileChooser();
        f.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        f.showSaveDialog(null);
        File export = new File(f.getSelectedFile() + "\\histograms.txt");

        PrintWriter pen = null;
        try {
            pen = new PrintWriter(export);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(PictureEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
        pen.println(pic.getWidth() + " " + pic.getHeight());
        pen.println("RED");
        for (int i = 0; i < 256; i++) {
            Histograms[0][i].exportHistogram(pen);
        }
        pen.println("GREEN");
        for (int i = 0; i < 256; i++) {
            Histograms[1][i].exportHistogram(pen);
        }
        pen.println("BLUE");
        for (int i = 0; i < 256; i++) {
            Histograms[2][i].exportHistogram(pen);
        }
        pen.close();
        JOptionPane.showMessageDialog(null, "Finished\n Exported to " + export.getAbsolutePath(), "Done", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_exportHistogramActionPerformed

    private void computeContrastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeContrastActionPerformed
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            Pixel[] pixels = pic.getPixels();

            int Contrast;
            double max_val = 0;
            double min_val = Integer.MAX_VALUE;

            for (int i = 0; i < pixels.length; i++) {
                // Here we Devide by 3 because get the avg .
                Contrast = (int) ((pixels[i].getRed() + pixels[i].getGreen() + pixels[i].getBlue()) / 3);
                //---if Contrast Greater than max we will save the value in max-----
                if (Contrast > max_val) {
                    max_val = Contrast;
                }
                //---if Contrast less than min we will save the value in min-----
                if (Contrast < min_val) {
                    min_val = Contrast;
                }
            }
            double contrast = ((max_val - min_val) / (max_val + min_val));
            JOptionPane.showMessageDialog(null, "The level of Contrast is = " + contrast);
        }
    }//GEN-LAST:event_computeContrastActionPerformed

    private void computeBrightnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeBrightnessActionPerformed

        Pixel[] pixelArray = pic.getPixels();

        double PixelsInstenses = 0;
        double brightness = 0.0;

        // loop through all the pixels
        for (Pixel currntPixel : pixelArray) {
            PixelsInstenses += currntPixel.getAverage();

        }
        brightness = (PixelsInstenses / pixelArray.length) / 255;

        JOptionPane.showMessageDialog(null, "Number of brightness = " + brightness);

    }//GEN-LAST:event_computeBrightnessActionPerformed

    private void ComputeHistogramsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComputeHistogramsActionPerformed
        // TODO add your handling code here:
        ComputeHistograms();
    }//GEN-LAST:event_ComputeHistogramsActionPerformed

    private void FiltersMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FiltersMenuActionPerformed
        // TODO add your handling code here:
        menuPanel.setBackground(FiltersMenu.getBackground());
        rotatePanel.setVisible(false);
        ReflectionPanel.setVisible(false);
        CopmutingPanel.setVisible(false);
        ConvertionPanel.setVisible(false);
        FiltersPanel.setVisible(true);
    }//GEN-LAST:event_FiltersMenuActionPerformed

    private void ComputingMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComputingMenuActionPerformed
        // TODO add your handling code here:

        menuPanel.setBackground(ComputingMenu.getBackground());
        rotatePanel.setVisible(false);
        ReflectionPanel.setVisible(false);
        CopmutingPanel.setVisible(true);
        ConvertionPanel.setVisible(false);
        FiltersPanel.setVisible(false);
    }//GEN-LAST:event_ComputingMenuActionPerformed

    private void DiaginalRef_d2_B2TActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiaginalRef_d2_B2TActionPerformed
        // TODO add your handling code here:
        pic.ReflectD2_B2T();
        updateIMG();
    }//GEN-LAST:event_DiaginalRef_d2_B2TActionPerformed

    private void DiaginalRef_d1_B2TActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiaginalRef_d1_B2TActionPerformed
        // TODO add your handling code here:
        pic.ReflectD1_B2T();
        updateIMG();
    }//GEN-LAST:event_DiaginalRef_d1_B2TActionPerformed

    private void DiaginalRef_d2_T2BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiaginalRef_d2_T2BActionPerformed
        // TODO add your handling code here:
        pic.ReflectD2_T2B();
        updateIMG();
    }//GEN-LAST:event_DiaginalRef_d2_T2BActionPerformed

    private void DiaginalRef_d1_T2BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiaginalRef_d1_T2BActionPerformed
        // TODO add your handling code here:
        // D1 Top to bottom
        pic.ReflectD1_T2B();
        updateIMG();
    }//GEN-LAST:event_DiaginalRef_d1_T2BActionPerformed

    private void HorizontalReflectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HorizontalReflectionActionPerformed
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            for (int x = 0; x < pic.getHeight(); x++) {
                int target_x = pic.getWidth() - 1;
                int source_x = 0;
                while (target_x > source_x) {
                    Pixel source_Pixel = pic.getPixel(source_x, x);
                    Pixel target_Pixel = pic.getPixel(target_x, x);
                    target_Pixel.setColor(source_Pixel.getColor());
                    target_x--;
                    source_x++;
                }
            }
            updateIMG();
        }
    }//GEN-LAST:event_HorizontalReflectionActionPerformed

    private void VerticalReflectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerticalReflectionActionPerformed
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int source_y = 0;
            int target_y = pic.getHeight() - 1;
            while (target_y > source_y) {
                for (int x = 0; x < pic.getWidth(); x++) {
                    Pixel source_Pixel = pic.getPixel(x, source_y);
                    Pixel target_Pixel = pic.getPixel(x, target_y);
                    target_Pixel.setColor(source_Pixel.getColor());
                }
                target_y--;
                source_y++;
            }
            updateIMG();
        }
    }//GEN-LAST:event_VerticalReflectionActionPerformed

    private void Rotate180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Rotate180ActionPerformed
        if (pic != null) {
            pic = pic.rotate(180);
            updateIMG();
        } else {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_Rotate180ActionPerformed

    private void RotateRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RotateRightActionPerformed
        if (pic != null) {
            pic = pic.rotateRight();
            updateIMG();
        } else {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_RotateRightActionPerformed

    private void RotateleftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RotateleftActionPerformed
        if (pic != null) {
            pic = pic.rotateLeft();
            updateIMG();
        } else {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_RotateleftActionPerformed

    private void ReflectionMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReflectionMenuActionPerformed
        // TODO add your handling code here:
        //H
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            menuPanel.setBackground(ReflectionMenu.getBackground());
            rotatePanel.setVisible(false);
            ReflectionPanel.setVisible(true);
            CopmutingPanel.setVisible(false);
            FiltersPanel.setVisible(false);
            ConvertionPanel.setVisible(false);
        }
    }//GEN-LAST:event_ReflectionMenuActionPerformed

    private void RotaionMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RotaionMenuActionPerformed
        // TODO add your handling code here:
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            menuPanel.setBackground(RotaionMenu.getBackground());
            rotatePanel.setVisible(true);
            ReflectionPanel.setVisible(false);
            CopmutingPanel.setVisible(false);
            FiltersPanel.setVisible(false);
            ConvertionPanel.setVisible(false);
        }
    }//GEN-LAST:event_RotaionMenuActionPerformed

    private void scaleSliderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_scaleSliderKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_scaleSliderKeyReleased

    private void scaleSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scaleSliderMouseReleased
        // TODO add your handling code here:

        // Scale code here.
        if (pic != null) {
            int scaleValue = scaleSlider.getValue();
            if (scaleValue == 0) {
                pic = pic.scaleDown(3);
            } else if (scaleValue == 1) {
                pic = pic.scaleDown(2);
            } else if (scaleValue == 3) {
                pic = pic.scaleUp(2);
            } else if (scaleValue == 4) {
                pic = pic.scaleUp(3);
            }
            //targetLabel.setSize(pic.getWidth(),pic.getHeight());
            scaleSlider.setValue(2);
            pic.show();
            // updateIMG();
        }
    }//GEN-LAST:event_scaleSliderMouseReleased

    private void scaleSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_scaleSliderFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_scaleSliderFocusLost

    private void BackgroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackgroundActionPerformed
         
        if (pic != null) {

            JFileChooser FileChooser = new JFileChooser("C:\\Users\\alish\\Downloads\\SoMultimedia");
            int conf = JOptionPane.showConfirmDialog(null, "Choose old background image", "Choose Old Background", JOptionPane.OK_CANCEL_OPTION);
            if (conf == 0) {  
                int val = FileChooser.showOpenDialog(null);
                if (val == JFileChooser.APPROVE_OPTION) {
                    
                    Picture oldBackground = new Picture(FileChooser.getSelectedFile().getAbsolutePath());
                    conf = JOptionPane.showConfirmDialog(null, "Choose new background image", "Choose New Background", JOptionPane.OK_CANCEL_OPTION);
                    if (conf == 0) {
                      
                        val = FileChooser.showOpenDialog(null);
                        if (val == JFileChooser.APPROVE_OPTION) {
                             {
                            Picture newBackground = new Picture(FileChooser.getSelectedFile().getAbsolutePath());
                            if (pic.getHeight() <= newBackground.getHeight() && pic.getWidth() <= newBackground.getWidth()) {
                                int[] values = new int[2];
                                for (int i = 0; i < values.length; i++) {
                                    String valu = JOptionPane.showInputDialog(null, "Enter threshold value" + "Enter value" + JOptionPane.QUESTION_MESSAGE);
                                    values[i] = Integer.parseInt(valu);
                                }
                                Background_Subtraction(values, oldBackground, newBackground);
                            } else {
                                JOptionPane.showMessageDialog(null, "New Background Size must be >= Picture Size", "Error", JOptionPane.ERROR_MESSAGE);

                            }
                        }
                    }
                    }
                }
            }
        }
    }//GEN-LAST:event_BackgroundActionPerformed

    private void BlendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlendActionPerformed
        if (pic != null) {
            JFileChooser jFileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
            jFileChooser.showOpenDialog(jFileChooser);
            Picture picture_obj = new Picture(jFileChooser.getSelectedFile().getAbsolutePath());

            // fixed this.
            if ((pic.getWidth() * pic.getHeight()) == (picture_obj.getWidth() * picture_obj.getHeight())) {
                Pixel[] pic_1 = pic.getPixels();
                Pixel[] pic_2 = picture_obj.getPixels();
                int i = 0;
                while (i < pic_1.length) {
                    //----Here we calc the Colors----
                    int valueP1 = ((pic_1[i].getRed() + pic_1[i].getGreen() + pic_1[i].getBlue()) / 3);
                    int valueP2 = ((pic_2[i].getRed() + pic_2[i].getGreen() + pic_2[i].getBlue()) / 3);
                    //----Here we calc avg for 2 pic----
                    int avg_Colors = (int) (valueP1 + valueP2) / 2;
                    pic_1[i].setColor(new Color(avg_Colors));
                    i++;
                }
                updateIMG();
            } else {
                JOptionPane.showMessageDialog(null, "the image should be the same size!");
            }
            updateIMG();
        } else {
            JOptionPane.showMessageDialog(null, "Select an image !", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BlendActionPerformed

    private void cropImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropImgActionPerformed
        // TODO add your handling code here:
        // image cropped button
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            JFrame parent = new JFrame();
            JOptionPane.showMessageDialog(parent, "Please click on two points in the image");

            imgLabel.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    System.out.println("Clicked!");
                    System.out.println(e.getX());
                    System.out.println(e.getY());
                    numOfClicks++;
                    if (numOfClicks == 1) {
                        x1 = e.getX();
                        y1 = e.getY();
                    } else if (numOfClicks == 2) {
                        x2 = e.getX();
                        y2 = e.getY();
                        // call the crop method with both cordinates.
                        CropImage(x1, y1, x2, y2);
                        numOfClicks = 0;
                        imgLabel.removeMouseListener(this);
                    }
                }
            });
        }
    }//GEN-LAST:event_cropImgActionPerformed

    private void redeyeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redeyeActionPerformed
        if (pic != null) {
            Color newColor = JColorChooser.showDialog(null, "Choose New Color", Color.BLACK);
            int trashhold = Integer.parseInt(JOptionPane.showInputDialog("TrashHold?"));

            x1 = Integer.parseInt(JOptionPane.showInputDialog("Enter x1 value: "));
            y1 = Integer.parseInt(JOptionPane.showInputDialog("Enter y1 value: "));
            x2 = Integer.parseInt(JOptionPane.showInputDialog("Enter x2 value: "));
            y2 = Integer.parseInt(JOptionPane.showInputDialog("Enter y2 value: "));

            for (int i = y1; i < y2; i++) {
                for (int j = x1; j < x2; j++) {
                    Pixel p = pic.getPixel(j, i);
                    //here we compare because get the different between Red color amd pxl .
                    if (p.colorDistance(Color.RED) < trashhold) {
                        p.setColor(newColor);
                    }
                }
            }
            updateIMG();

        } else {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_redeyeActionPerformed

    private void collageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collageActionPerformed
        // TODO add your handling code here:
        createCollage();
    }//GEN-LAST:event_collageActionPerformed

    private void edgeDetecLapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeDetecLapActionPerformed
        // TODO add your handling code here:
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // edge detection using laplactian filter from openCV library 
            // Declare the variables we are going to use
            Mat src, src_gray = new Mat(), dst = new Mat();
            int kernel_size = 3;
            int scale = 1;
            int delta = 0;
            int ddepth = CvType.CV_16S;
            src = Imgcodecs.imread(imgName, Imgcodecs.IMREAD_COLOR); // Load an image
            if (src.empty()) {
                System.out.println("Error opening image");
                return;
            }
            // Reduce noise by blurring with a Gaussian filter ( kernel size = 3 )
            Imgproc.GaussianBlur(src, src, new Size(3, 3), 0, 0, Core.BORDER_DEFAULT);
            // Convert the image to grayscale
            Imgproc.cvtColor(src, src_gray, Imgproc.COLOR_RGB2GRAY);
            Mat abs_dst = new Mat(); // the image
            Imgproc.Laplacian(src_gray, dst, ddepth, kernel_size, scale, delta, Core.BORDER_DEFAULT);
            // converting back to CV_8U
            Core.convertScaleAbs(dst, abs_dst);
            HighGui.imshow("Edge using laplacian filter", abs_dst);
            HighGui.waitKey(1000);
        }
    }//GEN-LAST:event_edgeDetecLapActionPerformed

    private void edgeDetecButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeDetecButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_edgeDetecButton1ActionPerformed

    private void edgeDetecLap1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeDetecLap1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_edgeDetecLap1ActionPerformed

    private void createCollage() {
        // ask for 4 picture
        Picture second = new Picture("C:\\Users\\Mjed\\Desktop\\512Imgs\\1.jpg");
        Picture third = new Picture("C:\\Users\\Mjed\\Desktop\\512IMGs\\2.jpg");
        Picture forth = new Picture("C:\\Users\\Mjed\\Desktop\\512IMGs\\3.jpg");
        Picture fifth = new Picture("C:\\Users\\Mjed\\Desktop\\512IMGs\\4.jpg");

        int width = pic.getWidth() + second.getWidth() + third.getWidth();
        int height = pic.getHeight() + second.getHeight() + forth.getHeight();
        pic = new Picture(width, height);
        // System.out.println(pic.getWidth() + "\t" + pic.getHeight());

        Pixel sourcePixel;
        Pixel targetPixel;

        // top left
        for (int i = 0; i < second.getWidth(); i++) {
            for (int j = 0; j < second.getHeight(); j++) {
                sourcePixel = second.getPixel(i, j);
                targetPixel = pic.getPixel(i, j);
                targetPixel.setColor(sourcePixel.getColor());
            }
        }
        // top right
        for (int j = 0; j < third.getWidth(); j++) {
            for (int k = 0; k < third.getHeight(); k++) {
                sourcePixel = third.getPixel(j, k);
                targetPixel = pic.getPixel((sourcePicture.getWidth() + j + second.getWidth()), (k));
                targetPixel.setColor(sourcePixel.getColor());
            }
        }
        // original picture in the middle
        for (int j = 0; j < sourcePicture.getWidth(); j++) {
            for (int k = 0; k < sourcePicture.getHeight(); k++) {
                sourcePixel = sourcePicture.getPixel(j, k);
                targetPixel = pic.getPixel((j + second.getWidth()), (k + second.getHeight()));
                targetPixel.setColor(sourcePixel.getColor());
            }
        }
        // bottom left
        for (int j = 0; j < forth.getWidth(); j++) {
            for (int k = 0; k < forth.getHeight(); k++) {
                sourcePixel = forth.getPixel(j, k);
                targetPixel = pic.getPixel((j), (k + second.getHeight() + sourcePicture.getHeight()));
                targetPixel.setColor(sourcePixel.getColor());
            }
        }
        // bottom right
        for (int j = 0; j < fifth.getWidth(); j++) {
            for (int k = 0; k < fifth.getHeight(); k++) {
                sourcePixel = fifth.getPixel(j, k);
                targetPixel = pic.getPixel((j + second.getWidth() + sourcePicture.getWidth()), (k + third.getHeight() + sourcePicture.getHeight()));
                targetPixel.setColor(sourcePixel.getColor());
            }
        }
        updateIMG();
    }

    private Picture sourcePicture;
    int numOfClicks = 0;
    int x1;
    int x2;
    int y1;
    int y2;

    //***************************************************************************************************************
    //
    //
    BufferedImage image;
    int width;
    int height;

    private Pixel_LL[][] ComputeHistograms() {

        Pixel_LL[][] Histograms = new Pixel_LL[3][256]; // [0] red, [1] green [2] blue

        int maxR = 0;
        int maxR_index = 0;
        int maxG = 0;
        int maxG_index = 0;
        int maxB = 0;
        int maxB_index = 0;

        for (int i = 0; i < 256; i++) { // Inisilazing all the arrays
            Histograms[0][i] = new Pixel_LL();
            Histograms[1][i] = new Pixel_LL();
            Histograms[2][i] = new Pixel_LL();
        }
        for (int i = 0; i < pic.getWidth(); i++) {
            for (int j = 0; j < pic.getHeight(); j++) {
                int intensityR = pic.getPixel(i, j).getRed();
                int intensityG = pic.getPixel(i, j).getGreen();
                int intensityB = pic.getPixel(i, j).getBlue();
                Histograms[0][intensityR].addPixel(new PixelLinkedList_node(i, j));
                Histograms[1][intensityG].addPixel(new PixelLinkedList_node(i, j));
                Histograms[2][intensityB].addPixel(new PixelLinkedList_node(i, j));

                if (Histograms[0][intensityR].getTotal() > maxR) {
                    maxR = Histograms[0][intensityR].getTotal();
                    maxR_index = intensityR;
                }
                if (Histograms[1][intensityG].getTotal() > maxG) {
                    maxG = Histograms[1][intensityG].getTotal();
                    maxG_index = intensityG;
                }
                if (Histograms[2][intensityB].getTotal() > maxB) {
                    maxB = Histograms[2][intensityB].getTotal();
                    maxB_index = intensityB;
                }
            }
        }
        // ***plotting the histogrmas***
        if ((maxR == maxG && maxR == maxB)) {// image is gray
            if ((maxR_index == maxG_index && maxG_index == maxB_index)) {
                PlotHistogram("Gray", Histograms[0]);
                return Histograms;
            }
        }
        PlotHistogram("RED", Histograms[0]);
        PlotHistogram("GREEN", Histograms[1]);
        PlotHistogram("BLUE", Histograms[2]);
        return Histograms;
    }

    private void PlotHistogram(String color, Pixel_LL Histogram[]) {
        // first must find the max height of the histogram.
        int maxHeight = 0;
        for (int i = 0; i < Histogram.length; i++) {
            if (Histogram[i].getTotal() > maxHeight) {
                maxHeight = Histogram[i].getTotal();
            }
        }

        Picture histogram = new Picture(256, 256, Color.white);

        Color c;
        if (color.equalsIgnoreCase("RED")) {
            c = Color.RED;
        } else if (color.equalsIgnoreCase("green")) {
            c = Color.GREEN;
        } else if (color.equalsIgnoreCase("BLue")) {
            c = Color.BLUE;
        } else {
            c = Color.GRAY;
        }

        // Actual max = maxHeight
        // the max we want to make is 512 so it become visible
        for (int i = 0; i < 256; i++) { // now plot the histogram
            int max = (int) (Histogram[i].getTotal() * 256 / maxHeight);
            for (int j = 255; j >= (256 - max); j--) {
                histogram.getPixel(i, j).setColor(c);
            }
        }
        histogram.scaleUp(2).show();
    }

    private void reConstructeTheImage(File histogramFile) throws FileNotFoundException {
        Scanner input = new Scanner(histogramFile);
        Picture replot = new Picture(input.nextInt(), input.nextInt());

        Pixel_LL[] HistogramsRed = new Pixel_LL[256];
        Pixel_LL[] HistogramsGreen = new Pixel_LL[256];
        Pixel_LL[] HistogramsBlue = new Pixel_LL[256];
        int total;
        String color = input.next();
        System.out.println("Importing the color " + color);
        for (int i = 0; i < 256; i++) { // Reading all level 0 pixels from red
            total = input.nextInt();
            System.out.println("Importing level " + i + " of " + color + " it has: " + total + " pixels");
            HistogramsRed[i] = new Pixel_LL(input, total);
        }
        color = input.next();
        System.out.println("Importing the color " + color);
        for (int i = 0; i < 256; i++) { // Reading all level 0 pixels from green
            total = input.nextInt();
            System.out.println("Importing level " + i + " of " + color + " it has: " + total + " pixels");
            HistogramsGreen[i] = new Pixel_LL(input, total);
        }
        color = input.next();
        System.out.println("Importing the color " + color);
        for (int i = 0; i < 256; i++) { // Reading all level 0 pixels from blue
            total = input.nextInt();
            System.out.println("Importing level " + i + " of " + color + " it has: " + total + " pixels");
            HistogramsBlue[i] = new Pixel_LL(input, total);
        }
        PixelLinkedList_node helpPtr = null;

        for (int i = 0; i < 256; i++) { // 0 - 256
            if (HistogramsRed[i].getHead() != null) {
                helpPtr = HistogramsRed[i].getHead();
                while (helpPtr != null) {
                    replot.getPixel(helpPtr.getX(), helpPtr.getY()).setRed(i);
                    helpPtr = helpPtr.getNext();
                }
            }

            if (HistogramsGreen[i].getHead() != null) {
                helpPtr = HistogramsGreen[i].getHead();
                while (helpPtr != null) {
                    replot.getPixel(helpPtr.getX(), helpPtr.getY()).setGreen(i);
                    helpPtr = helpPtr.getNext();
                }
            }

            if (HistogramsBlue[i].getHead() != null) {
                helpPtr = HistogramsBlue[i].getHead();
                while (helpPtr != null) {
                    replot.getPixel(helpPtr.getX(), helpPtr.getY()).setBlue(i);
                    helpPtr = helpPtr.getNext();
                }
            }
        }
        System.out.println("DONE");
        replot.show();
    }

    private void Background_Subtraction(int[] values, Picture oldBackground, Picture newBackground) {
        Pixel picPixel = null;
        Pixel oldPixel = null;
        Pixel newPixel = null;
        multimedia.Grid grid = new multimedia.Grid();
        grid.setTargts(pic); // as the original pic as first target.
        for (int i = 0; i < values.length; i++) {
            Picture copyPic = new Picture(pic);//take a copy of the original pic
            for (int x = 0; x < copyPic.getWidth(); x++) {
                for (int y = 0; y < copyPic.getHeight(); y++) {
                    picPixel = copyPic.getPixel(x, y);
                    oldPixel = oldBackground.getPixel(x, y);
                    newPixel = newBackground.getPixel(x, y);
                    //compare the orignal image with the old background
                    if (picPixel.colorDistance(oldPixel.getColor()) < values[i]) {
                        picPixel.setColor(newPixel.getColor());
                    }
                }
            }
            grid.setTargts(copyPic);//add the image to the grid
        }
        grid.setVisible(true);
        grid.DisplayEdges();
    }

    // Crop image method
    private void CropImage(int x1, int y1, int x2, int y2) {

        double W = (pic.getWidth() * 1.00 / imgLabel.getWidth());
        double H = (pic.getHeight() * 1.00 / imgLabel.getHeight());

        x1 = (int) (W * x1);
        x2 = (int) (W * x2);
        y1 = (int) (H * y1);
        y2 = (int) (H * y2);

        Picture newPic = new Picture(sourcePicture.getWidth(), sourcePicture.getHeight());

        Pixel sourcePixel;
        Pixel targetPixel;

        for (int i = x1; i < x2; i++) {
            for (int j = y1; j < y2; j++) {
                sourcePixel = sourcePicture.getPixel(i, j);
                targetPixel = newPic.getPixel(i, j);
                targetPixel.setColor(sourcePixel.getColor());
            }

        }
        pic = newPic;
        updateIMG();

    }
    /**
     * @param args the command line arguments
     */
    private static int R_Value = -1;
    private static int G_Value = -1;
    private static int B_Value = -1;
    private static String imgName;
    private static Picture pic;

    private void updateColors() {
        Pixel[] pixelArray = pic.getPixels();
        for (Pixel pixelObj : pixelArray) {
            if (R_Value != -1) {
                pixelObj.setRed((int) (pixelObj.getRed() * (R_Value / 50.0)));
            }
            if (G_Value != -1) {
                pixelObj.setGreen((int) (pixelObj.getGreen() * (G_Value / 50.0)));
            }
            if (B_Value != -1) {
                pixelObj.setBlue((int) (pixelObj.getBlue() * (B_Value / 50.0)));
            }
        }
        redSlider.setValue(50);
        greenSlider.setValue(50);
        blueSlider.setValue(50);
        updateIMG();
    }

    private void updateIMG() {
        Image img = (pic.getImage()).getScaledInstance(targetLabel.getWidth(), targetLabel.getHeight(), Image.SCALE_SMOOTH);;
        targetLabel.setText("");
        targetLabel.setIcon(new ImageIcon(img));
        //System.out.printf("R= %d,G= %d,B= %d \n", R_Value, G_Value, B_Value);
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PictureEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PictureEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PictureEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PictureEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PictureEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Background;
    private javax.swing.JButton Blend;
    private javax.swing.JButton ComputeHistograms;
    private javax.swing.JButton ComputingMenu;
    private javax.swing.JPanel ContsPanel;
    private javax.swing.JSlider ContsSlider;
    private javax.swing.JButton ConvertToHSV;
    private javax.swing.JPanel ConvertionPanel;
    private javax.swing.JPanel CopmutingPanel;
    private javax.swing.JButton DiaginalRef_d1_B2T;
    private javax.swing.JButton DiaginalRef_d1_T2B;
    private javax.swing.JButton DiaginalRef_d2_B2T;
    private javax.swing.JButton DiaginalRef_d2_T2B;
    private javax.swing.JButton FiltersMenu;
    private javax.swing.JPanel FiltersPanel;
    private javax.swing.JButton GaussianFilter;
    private javax.swing.JButton HorizontalReflection;
    private javax.swing.JButton LaplacianFilter;
    private javax.swing.JButton ReflectionMenu;
    private javax.swing.JPanel ReflectionPanel;
    private javax.swing.JButton RotaionMenu;
    private javax.swing.JButton Rotate180;
    private javax.swing.JButton RotateRight;
    private javax.swing.JButton Rotateleft;
    private javax.swing.JButton VerticalReflection;
    private javax.swing.JSlider blueSlider;
    private javax.swing.JButton boxFilter;
    private javax.swing.JButton chooseImg;
    private javax.swing.JButton clearImage;
    private javax.swing.JButton collage;
    private javax.swing.JButton computeBrightness;
    private javax.swing.JButton computeContrast;
    private javax.swing.JButton convertionMenu;
    private javax.swing.JButton cropImg;
    private javax.swing.JButton edgeDetecButton1;
    private javax.swing.JButton edgeDetecLap;
    private javax.swing.JButton edgeDetecLap1;
    private javax.swing.JButton exportHistogram;
    private javax.swing.JButton grayTobianry;
    private javax.swing.JSlider greenSlider;
    private javax.swing.JLabel imgLabel;
    private javax.swing.JButton importHistogram;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton maxFilter;
    private javax.swing.JButton medianFilter;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JButton minFilter;
    private javax.swing.JSlider redSlider;
    private javax.swing.JToggleButton redeye;
    private javax.swing.JPanel rotatePanel;
    private javax.swing.JSlider scaleSlider;
    private javax.swing.JLabel targetLabel;
    private javax.swing.JButton weightedMedianFilter;
    // End of variables declaration//GEN-END:variables
}
