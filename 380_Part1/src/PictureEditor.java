
import cpit380practice.Picture;
import cpit380practice.Pixel;
import cpit380practice.SimplePicture;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author Mjed
 */
public class PictureEditor extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public PictureEditor() {
        initComponents();
        rotatePanel.setVisible(false);
        ReflectionPanel.setVisible(false);
        CopmutingPanel.setVisible(false);
        FiltersPanel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooseImg = new javax.swing.JButton();
        clearImage = new javax.swing.JButton();
        menuPanel = new javax.swing.JPanel();
        RotaionMenu = new javax.swing.JButton();
        ReflectionMenu = new javax.swing.JButton();
        rotatePanel = new javax.swing.JPanel();
        Rotateleft = new javax.swing.JButton();
        RotateRight = new javax.swing.JButton();
        Rotate180 = new javax.swing.JButton();
        ReflectionPanel = new javax.swing.JPanel();
        VerticalReflection = new javax.swing.JButton();
        HorizontalReflection = new javax.swing.JButton();
        DiaginalRef_d1_T2B = new javax.swing.JButton();
        DiaginalRef_d2_T2B = new javax.swing.JButton();
        DiaginalRef_d1_B2T = new javax.swing.JButton();
        DiaginalRef_d2_B2T = new javax.swing.JButton();
        ComputingMenu = new javax.swing.JButton();
        FiltersMenu = new javax.swing.JButton();
        CopmutingPanel = new javax.swing.JPanel();
        computeHistograms = new javax.swing.JButton();
        computeBrightness = new javax.swing.JButton();
        computeContrast = new javax.swing.JButton();
        FiltersPanel = new javax.swing.JPanel();
        boxFilter = new javax.swing.JButton();
        GaussianFilter = new javax.swing.JButton();
        LaplacianFilter = new javax.swing.JButton();
        minFilter = new javax.swing.JButton();
        maxFilter = new javax.swing.JButton();
        medianFilter = new javax.swing.JButton();
        weightedFilter = new javax.swing.JButton();
        imgLabel = new javax.swing.JLabel();
        targetLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        redSlider = new javax.swing.JSlider();
        greenSlider = new javax.swing.JSlider();
        blueSlider = new javax.swing.JSlider();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        scaleSlider = new javax.swing.JSlider();
        jButton1 = new javax.swing.JButton();
        Blend = new javax.swing.JButton();
        cropImg = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setName("Editor"); // NOI18N

        chooseImg.setText("Choose an image");
        chooseImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseImgActionPerformed(evt);
            }
        });

        clearImage.setText("Clear");
        clearImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearImageActionPerformed(evt);
            }
        });

        menuPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        RotaionMenu.setBackground(Color.decode("#264653"));
        RotaionMenu.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        RotaionMenu.setForeground(new java.awt.Color(255, 255, 255));
        RotaionMenu.setText("Rotate");
        RotaionMenu.setToolTipText("");
        RotaionMenu.setBorder(null);
        RotaionMenu.setMargin(new java.awt.Insets(0, 0, 0, 0));
        RotaionMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RotaionMenuActionPerformed(evt);
            }
        });

        ReflectionMenu.setBackground(Color.decode("#2a9d8f"));
        ReflectionMenu.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ReflectionMenu.setForeground(new java.awt.Color(255, 255, 255));
        ReflectionMenu.setText("Reflection");
        ReflectionMenu.setToolTipText("");
        ReflectionMenu.setBorder(null);
        ReflectionMenu.setMargin(new java.awt.Insets(0, 0, 0, 0));
        ReflectionMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReflectionMenuActionPerformed(evt);
            }
        });

        rotatePanel.setOpaque(false);

        Rotateleft.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Rotateleft.setText("Rotate left");
        Rotateleft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RotateleftActionPerformed(evt);
            }
        });

        RotateRight.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        RotateRight.setText("Rotate Right");
        RotateRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RotateRightActionPerformed(evt);
            }
        });

        Rotate180.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Rotate180.setText("Rotate 180");
        Rotate180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Rotate180ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rotatePanelLayout = new javax.swing.GroupLayout(rotatePanel);
        rotatePanel.setLayout(rotatePanelLayout);
        rotatePanelLayout.setHorizontalGroup(
            rotatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rotatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rotatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Rotateleft, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RotateRight, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Rotate180, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        rotatePanelLayout.setVerticalGroup(
            rotatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rotatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Rotateleft)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RotateRight)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Rotate180)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ReflectionPanel.setOpaque(false);

        VerticalReflection.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        VerticalReflection.setText("Vertical Reflection");
        VerticalReflection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerticalReflectionActionPerformed(evt);
            }
        });

        HorizontalReflection.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        HorizontalReflection.setText("Horizontal Reflection");
        HorizontalReflection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HorizontalReflectionActionPerformed(evt);
            }
        });

        DiaginalRef_d1_T2B.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DiaginalRef_d1_T2B.setText("Diagonal Reflection D1 (Top to bottom)");
        DiaginalRef_d1_T2B.setActionCommand("Diagonal Reflection D1 (Top to bottom)");
        DiaginalRef_d1_T2B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiaginalRef_d1_T2BActionPerformed(evt);
            }
        });

        DiaginalRef_d2_T2B.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DiaginalRef_d2_T2B.setText("Diagonal Reflection D2 (Top to bottom)");
        DiaginalRef_d2_T2B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiaginalRef_d2_T2BActionPerformed(evt);
            }
        });

        DiaginalRef_d1_B2T.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DiaginalRef_d1_B2T.setText("Diagonal Reflection D1 (Bottom to top)");
        DiaginalRef_d1_B2T.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiaginalRef_d1_B2TActionPerformed(evt);
            }
        });

        DiaginalRef_d2_B2T.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DiaginalRef_d2_B2T.setText("Diagonal Reflection D2 (Bottom to top)");
        DiaginalRef_d2_B2T.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiaginalRef_d2_B2TActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ReflectionPanelLayout = new javax.swing.GroupLayout(ReflectionPanel);
        ReflectionPanel.setLayout(ReflectionPanelLayout);
        ReflectionPanelLayout.setHorizontalGroup(
            ReflectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReflectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ReflectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HorizontalReflection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(VerticalReflection, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DiaginalRef_d1_T2B, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DiaginalRef_d2_T2B, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DiaginalRef_d1_B2T, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DiaginalRef_d2_B2T, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        ReflectionPanelLayout.setVerticalGroup(
            ReflectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReflectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(VerticalReflection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HorizontalReflection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DiaginalRef_d1_T2B)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DiaginalRef_d1_B2T)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DiaginalRef_d2_T2B)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DiaginalRef_d2_B2T)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ComputingMenu.setBackground(Color.decode("#f4a261"));
        ComputingMenu.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ComputingMenu.setForeground(new java.awt.Color(255, 255, 255));
        ComputingMenu.setText("Computing");
        ComputingMenu.setToolTipText("");
        ComputingMenu.setBorder(null);
        ComputingMenu.setMargin(new java.awt.Insets(0, 0, 0, 0));
        ComputingMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComputingMenuActionPerformed(evt);
            }
        });

        FiltersMenu.setBackground(Color.decode("#e76f51"));
        FiltersMenu.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        FiltersMenu.setForeground(new java.awt.Color(255, 255, 255));
        FiltersMenu.setText("Filters");
        FiltersMenu.setToolTipText("");
        FiltersMenu.setBorder(null);
        FiltersMenu.setMargin(new java.awt.Insets(0, 0, 0, 0));
        FiltersMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FiltersMenuActionPerformed(evt);
            }
        });

        CopmutingPanel.setOpaque(false);

        computeHistograms.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        computeHistograms.setText("Compute Histograms");
        computeHistograms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeHistogramsActionPerformed(evt);
            }
        });

        computeBrightness.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        computeBrightness.setText("Compute Brightness");
        computeBrightness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeBrightnessActionPerformed(evt);
            }
        });

        computeContrast.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        computeContrast.setText("Compute Contrast");
        computeContrast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeContrastActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CopmutingPanelLayout = new javax.swing.GroupLayout(CopmutingPanel);
        CopmutingPanel.setLayout(CopmutingPanelLayout);
        CopmutingPanelLayout.setHorizontalGroup(
            CopmutingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CopmutingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CopmutingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(computeBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(computeHistograms, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(computeContrast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        CopmutingPanelLayout.setVerticalGroup(
            CopmutingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CopmutingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(computeHistograms)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(computeBrightness)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(computeContrast)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        FiltersPanel.setOpaque(false);

        boxFilter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        boxFilter.setText("Box filter");
        boxFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxFilterActionPerformed(evt);
            }
        });

        GaussianFilter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        GaussianFilter.setText("Gaussian filters");
        GaussianFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GaussianFilterActionPerformed(evt);
            }
        });

        LaplacianFilter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        LaplacianFilter.setText("Laplacian filters");
        LaplacianFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LaplacianFilterActionPerformed(evt);
            }
        });

        minFilter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        minFilter.setText("Min filter");
        minFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minFilterActionPerformed(evt);
            }
        });

        maxFilter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        maxFilter.setText("Min filter");
        maxFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxFilterActionPerformed(evt);
            }
        });

        medianFilter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        medianFilter.setText("Median filter");
        medianFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medianFilterActionPerformed(evt);
            }
        });

        weightedFilter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        weightedFilter.setText("Weighted filter");
        weightedFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightedFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FiltersPanelLayout = new javax.swing.GroupLayout(FiltersPanel);
        FiltersPanel.setLayout(FiltersPanelLayout);
        FiltersPanelLayout.setHorizontalGroup(
            FiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FiltersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boxFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(GaussianFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LaplacianFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(FiltersPanelLayout.createSequentialGroup()
                        .addComponent(minFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(maxFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(FiltersPanelLayout.createSequentialGroup()
                        .addComponent(medianFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(weightedFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        FiltersPanelLayout.setVerticalGroup(
            FiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FiltersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boxFilter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GaussianFilter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LaplacianFilter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minFilter)
                    .addComponent(maxFilter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(medianFilter)
                    .addComponent(weightedFilter))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuPanelLayout.createSequentialGroup()
                        .addComponent(RotaionMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(ReflectionMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(ComputingMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(FiltersMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(menuPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rotatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CopmutingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(FiltersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(menuPanelLayout.createSequentialGroup()
                                .addComponent(ReflectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RotaionMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ReflectionMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComputingMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FiltersMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rotatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ReflectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CopmutingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FiltersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        imgLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgLabel.setText("Missing an image");

        targetLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        targetLabel.setText("Missing an image");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setPreferredSize(new java.awt.Dimension(350, 150));

        jLabel1.setText("Red:");

        jLabel2.setText("Green:");

        jLabel3.setText("Blue:");

        redSlider.setMaximum(255);
        redSlider.setToolTipText("");
        redSlider.setValue(0);
        redSlider.setEnabled(false);
        redSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                redSliderFocusLost(evt);
            }
        });
        redSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                redSliderMouseReleased(evt);
            }
        });
        redSlider.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                redSliderKeyReleased(evt);
            }
        });

        greenSlider.setMaximum(255);
        greenSlider.setValue(0);
        greenSlider.setEnabled(false);
        greenSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                greenSliderMouseReleased(evt);
            }
        });

        blueSlider.setMaximum(255);
        blueSlider.setValue(0);
        blueSlider.setEnabled(false);
        blueSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                blueSliderMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(greenSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                    .addComponent(blueSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(redSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(redSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(10, 10, 10))
                    .addComponent(greenSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(blueSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setPreferredSize(new java.awt.Dimension(350, 150));

        jLabel4.setText("Scale:");

        scaleSlider.setMaximum(4);
        scaleSlider.setToolTipText("");
        scaleSlider.setValue(2);
        scaleSlider.setEnabled(false);
        scaleSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                scaleSliderFocusLost(evt);
            }
        });
        scaleSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                scaleSliderMouseReleased(evt);
            }
        });
        scaleSlider.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                scaleSliderKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(scaleSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(scaleSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Convert to gray scale image");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConvertToGrayScale(evt);
            }
        });

        Blend.setText("Blend");
        Blend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlendActionPerformed(evt);
            }
        });

        cropImg.setText("Crop image");
        cropImg.setToolTipText("");
        cropImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropImgActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(menuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Blend, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(cropImg, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(chooseImg, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearImage, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(imgLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(targetLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chooseImg)
                            .addComponent(clearImage))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(targetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(cropImg))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Blend)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void redSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_redSliderFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_redSliderFocusLost

    private void redSliderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_redSliderKeyReleased
    }//GEN-LAST:event_redSliderKeyReleased

    private void redSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_redSliderMouseReleased
        if (pic != null) {
            R_Value = redSlider.getValue();
            updateColors();
        }

    }//GEN-LAST:event_redSliderMouseReleased

    private void greenSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_greenSliderMouseReleased
        // TODO add your handling code here:
        if (pic != null) {
            G_Value = greenSlider.getValue();
            updateColors();
        }
    }//GEN-LAST:event_greenSliderMouseReleased

    private void blueSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_blueSliderMouseReleased
        // TODO add your handling code here:
        if (pic != null) {
            B_Value = blueSlider.getValue();
            updateColors();
        }
    }//GEN-LAST:event_blueSliderMouseReleased


    private void chooseImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseImgActionPerformed
        // TODO add your handling code here:

        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setDialogTitle("Select an image");
        jfc.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("PNG or JPG", "png", "jpg");
        jfc.addChoosableFileFilter(filter);

        int returnValue = jfc.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            System.out.println(jfc.getSelectedFile().getPath() + " is selected");
            imgName = jfc.getSelectedFile().getPath();
            redSlider.setEnabled(true);
            greenSlider.setEnabled(true);
            blueSlider.setEnabled(true);
            scaleSlider.setEnabled(true);
            redSlider.setValue(0);
            greenSlider.setValue(0);
            blueSlider.setValue(0);
            R_Value = -1;
            G_Value = -1;
            B_Value = -1;
            pic = new Picture(imgName);
            sourcePicture = new Picture(imgName);
            Image img = (pic.getImage()).getScaledInstance(imgLabel.getWidth(), imgLabel.getHeight(), Image.SCALE_SMOOTH);;
            imgLabel.setText("");
            imgLabel.setIcon(new ImageIcon(img));
            updateIMG();

        }

    }//GEN-LAST:event_chooseImgActionPerformed
    private Picture sourcePicture;
    int numOfClicks = 0;
    int x1;
    int x2;
    int y1;
    int y2;

    private void cropImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropImgActionPerformed
        // TODO add your handling code here:
        // image cropped button
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            JFrame parent = new JFrame();
            JOptionPane.showMessageDialog(parent, "Please click on two points in the image");

            imgLabel.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    System.out.println("Clicked!");
                    System.out.println(e.getX());
                    System.out.println(e.getY());
                    numOfClicks++;
                    if (numOfClicks == 1) {
                        x1 = e.getX();
                        y1 = e.getY();
                    } else if (numOfClicks == 2) {
                        x2 = e.getX();
                        y2 = e.getY();
                        // call the crop method with both cordinates.
                        CropImage(x1, y1, x2, y2);
                        numOfClicks = 0;
                        imgLabel.removeMouseListener(this);
                    }
                }
            });
        }
    }//GEN-LAST:event_cropImgActionPerformed

    //***************************************************************************************************************
    //
    //
    BufferedImage image;
    int width;
    int height;

    // not completed
    private void ConvertToGrayScale(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConvertToGrayScale
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            Pixel[] pxl = pic.getPixels();
            for (int i = 0; i < pxl.length; i++) {
                int avg = (pxl[i].getRed() + pxl[i].getBlue() + pxl[i].getGreen()) / 3;
                pxl[i].setColor(new Color(avg, avg, avg));
            }
            updateIMG();
        }


    }//GEN-LAST:event_ConvertToGrayScale

    private void clearImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearImageActionPerformed
        pic = new Picture(imgName);
        redSlider.setValue(0);
        greenSlider.setValue(0);
        blueSlider.setValue(0);
        R_Value = -1;
        G_Value = -1;
        B_Value = -1;
        updateIMG();
    }//GEN-LAST:event_clearImageActionPerformed

    private void RotateleftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RotateleftActionPerformed
        if (pic != null) {
            pic = pic.rotateLeft();
            updateIMG();
        } else {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_RotateleftActionPerformed

    private void RotateRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RotateRightActionPerformed
        if (pic != null) {
            pic = pic.rotateRight();
            updateIMG();
        } else {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_RotateRightActionPerformed

    private void Rotate180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Rotate180ActionPerformed
        if (pic != null) {
            pic = pic.rotate(180);
            updateIMG();
        } else {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_Rotate180ActionPerformed

    private void BlendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlendActionPerformed
        if (pic != null) {
            JFileChooser jFileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
            jFileChooser.showOpenDialog(jFileChooser);
            Picture picture_obj = new Picture(jFileChooser.getSelectedFile().getAbsolutePath());
            if ((pic.getWidth() * pic.getHeight()) == (picture_obj.getWidth() * picture_obj.getHeight())) {
                Pixel[] pic_1 = pic.getPixels();
                Pixel[] pic_2 = picture_obj.getPixels();
                int num_Colors = 3;
                int i = 0;
                while (i < pic_1.length) {
                    //----Here we calc the Colors----
                    int valueP1 = ((pic_1[i].getRed() + pic_1[i].getGreen() + pic_1[i].getBlue()) / num_Colors);
                    int valueP2 = ((pic_2[i].getRed() + pic_2[i].getGreen() + pic_2[i].getBlue()) / num_Colors);
                    //----Here we calc avg for 2 pic----
                    int avg_Colors = (int) (valueP1 + valueP2) / 2;
                    pic_1[i].setColor(new Color(avg_Colors));
                    i++;
                }
                updateIMG();
            } else {
                JOptionPane.showMessageDialog(null, "the image should be the same size!");
            }
            updateIMG();
        } else {
            JOptionPane.showMessageDialog(null, "Select an image !", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BlendActionPerformed

    private void VerticalReflectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerticalReflectionActionPerformed
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int source_y = 0;
            int target_y = pic.getHeight() - 1;
            while (target_y > source_y) {
                for (int x = 0; x < pic.getWidth(); x++) {
                    Pixel source_Pixel = pic.getPixel(x, source_y);
                    Pixel target_Pixel = pic.getPixel(x, target_y);
                    target_Pixel.setColor(source_Pixel.getColor());
                }
                target_y--;
                source_y++;
            }
            updateIMG();
        }
    }//GEN-LAST:event_VerticalReflectionActionPerformed

    private void scaleSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_scaleSliderFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_scaleSliderFocusLost

    private void scaleSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scaleSliderMouseReleased
        // TODO add your handling code here:

        // Scale code here.
        //WHEW
//        if (pic != null) {
//            int scaleValue = scaleSlider.getValue();
//            if (scaleValue == 0) {
//                pic = pic.scaleDown(3);
//            } else if (scaleValue == 1) {
//                pic = pic.scaleDown(2);
//            } else if (scaleValue == 3) {
//                pic = pic.scaleUp(2);
//            } else if (scaleValue == 4) {
//                pic = pic.scaleUp(3);
//            }
//            scaleSlider.setValue(2);
//            pic.show();
//            updateIMG();
//        }

    }//GEN-LAST:event_scaleSliderMouseReleased

    private void scaleSliderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_scaleSliderKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_scaleSliderKeyReleased

    private void HorizontalReflectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HorizontalReflectionActionPerformed
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            for (int x = 0; x < pic.getHeight(); x++) {
                int target_x = pic.getWidth() - 1;
                int source_x = 0;
                while (target_x > source_x) {
                    Pixel source_Pixel = pic.getPixel(source_x, x);
                    Pixel target_Pixel = pic.getPixel(target_x, x);
                    target_Pixel.setColor(source_Pixel.getColor());
                    target_x--;
                    source_x++;
                }
            }
            updateIMG();
        }
    }//GEN-LAST:event_HorizontalReflectionActionPerformed

    private void ReflectionMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReflectionMenuActionPerformed
        // TODO add your handling code here:
        //H
        menuPanel.setBackground(ReflectionMenu.getBackground());
        rotatePanel.setVisible(false);
        ReflectionPanel.setVisible(true);
        CopmutingPanel.setVisible(false);
        FiltersPanel.setVisible(false);
    }//GEN-LAST:event_ReflectionMenuActionPerformed

    private void RotaionMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RotaionMenuActionPerformed
        // TODO add your handling code here:
        menuPanel.setBackground(RotaionMenu.getBackground());
        rotatePanel.setVisible(true);
        ReflectionPanel.setVisible(false);
        CopmutingPanel.setVisible(false);
        FiltersPanel.setVisible(false);
    }//GEN-LAST:event_RotaionMenuActionPerformed

    private void ComputingMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComputingMenuActionPerformed
        // TODO add your handling code here:
        menuPanel.setBackground(ComputingMenu.getBackground());
        rotatePanel.setVisible(false);
        ReflectionPanel.setVisible(false);
        CopmutingPanel.setVisible(true);
        FiltersPanel.setVisible(false);
    }//GEN-LAST:event_ComputingMenuActionPerformed

    private void FiltersMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FiltersMenuActionPerformed
        // TODO add your handling code here:
        menuPanel.setBackground(FiltersMenu.getBackground());
        rotatePanel.setVisible(false);
        ReflectionPanel.setVisible(false);
        CopmutingPanel.setVisible(false);
        FiltersPanel.setVisible(true);
    }//GEN-LAST:event_FiltersMenuActionPerformed

    private void computeHistogramsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeHistogramsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_computeHistogramsActionPerformed

    private void computeBrightnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeBrightnessActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_computeBrightnessActionPerformed

    private void boxFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_boxFilterActionPerformed

    private void DiaginalRef_d1_T2BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiaginalRef_d1_T2BActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DiaginalRef_d1_T2BActionPerformed

    private void DiaginalRef_d2_T2BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiaginalRef_d2_T2BActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DiaginalRef_d2_T2BActionPerformed

    private void computeContrastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeContrastActionPerformed
              if (pic == null) {
                  JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
              } else {
                  Pixel[] pixelArray = pic.getPixels();
                  
                  int Contrast;
                  double max = 0;
                  double min = 100000000;
                  
                  for(int i = 0;i<pixelArray.length;i++) {
                      
                      Contrast = (int) ((pixelArray[i].getRed() + pixelArray[i].getGreen() + pixelArray[i].getBlue()) / 3);
                   //---if Contrast Greater than max we will save the value in max-----
                      if (Contrast > max) {
                          max = Contrast;
                      }
                   //---if Contrast less than min we will save the value in min-----
                      if (Contrast < min) {
                          min = Contrast;
                      }
                  }  
                  double contrast = ((max - min) / (max + min));
                  JOptionPane.showMessageDialog(null, "Number of Contrast = " + contrast); 
              }
    }//GEN-LAST:event_computeContrastActionPerformed

    private void GaussianFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GaussianFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GaussianFilterActionPerformed

    private void LaplacianFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LaplacianFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LaplacianFilterActionPerformed

    private void minFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minFilterActionPerformed

    private void maxFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxFilterActionPerformed

    private void medianFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medianFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_medianFilterActionPerformed

    private void weightedFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightedFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_weightedFilterActionPerformed

    private void DiaginalRef_d1_B2TActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiaginalRef_d1_B2TActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DiaginalRef_d1_B2TActionPerformed

    private void DiaginalRef_d2_B2TActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiaginalRef_d2_B2TActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DiaginalRef_d2_B2TActionPerformed

    //** NEEDS SOME EDIT**
    private void CropImage(int x1, int y1, int x2, int y2) {

        double W = (pic.getWidth() * 1.00 / targetLabel.getWidth());
        double H = (pic.getHeight() * 1.00 / targetLabel.getHeight());

        x1 = (int) (W * x1);
        x2 = (int) (W * x2);
        y1 = (int) (H * y1);
        y2 = (int) (H * y2);

        Picture newPic = new Picture(sourcePicture.getWidth(), sourcePicture.getHeight());

        Pixel sourcePixel;
        Pixel targetPixel;

        for (int i = x1; i < x2; i++) {
            for (int j = y1; j < y2; j++) {
                sourcePixel = sourcePicture.getPixel(i, j);
                targetPixel = newPic.getPixel(i, j);
                targetPixel.setColor(sourcePixel.getColor());
            }

        }
        pic = newPic;
        updateIMG();

    }
    /**
     * @param args the command line arguments
     */
    private static int R_Value = -1;
    private static int G_Value = -1;
    private static int B_Value = -1;
    private static String imgName;
    private static Picture pic;

    // **************************************************************************************************************
    // needs to be updated as the following:
    // convert 255 to 100%.
    // if less than 50 decrese value.
    // more than 50 increase value.  
    private void updateColors() {
        Pixel[] pixelArray = pic.getPixels();
        for (Pixel pixelObj : pixelArray) {

            if (R_Value != -1) {
                pixelObj.setRed(R_Value);
            }
            if (G_Value != -1) {
                pixelObj.setGreen(G_Value);
            }
            if (B_Value != -1) {
                pixelObj.setBlue(B_Value);
            }

        }
        updateIMG();
    }
    // **************************************************************************************************************

    private void updateIMG() {
        Image img = (pic.getImage()).getScaledInstance(imgLabel.getWidth(), imgLabel.getHeight(), Image.SCALE_SMOOTH);;
        targetLabel.setText("");
        targetLabel.setIcon(new ImageIcon(img));
        System.out.printf("R= %d,G= %d,B= %d \n", R_Value, G_Value, B_Value);
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PictureEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PictureEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PictureEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PictureEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PictureEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Blend;
    private javax.swing.JButton ComputingMenu;
    private javax.swing.JPanel CopmutingPanel;
    private javax.swing.JButton DiaginalRef_d1_B2T;
    private javax.swing.JButton DiaginalRef_d1_T2B;
    private javax.swing.JButton DiaginalRef_d2_B2T;
    private javax.swing.JButton DiaginalRef_d2_T2B;
    private javax.swing.JButton FiltersMenu;
    private javax.swing.JPanel FiltersPanel;
    private javax.swing.JButton GaussianFilter;
    private javax.swing.JButton HorizontalReflection;
    private javax.swing.JButton LaplacianFilter;
    private javax.swing.JButton ReflectionMenu;
    private javax.swing.JPanel ReflectionPanel;
    private javax.swing.JButton RotaionMenu;
    private javax.swing.JButton Rotate180;
    private javax.swing.JButton RotateRight;
    private javax.swing.JButton Rotateleft;
    private javax.swing.JButton VerticalReflection;
    private javax.swing.JSlider blueSlider;
    private javax.swing.JButton boxFilter;
    private javax.swing.JButton chooseImg;
    private javax.swing.JButton clearImage;
    private javax.swing.JButton computeBrightness;
    private javax.swing.JButton computeContrast;
    private javax.swing.JButton computeHistograms;
    private javax.swing.JButton cropImg;
    private javax.swing.JSlider greenSlider;
    private javax.swing.JLabel imgLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton maxFilter;
    private javax.swing.JButton medianFilter;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JButton minFilter;
    private javax.swing.JSlider redSlider;
    private javax.swing.JPanel rotatePanel;
    private javax.swing.JSlider scaleSlider;
    private javax.swing.JLabel targetLabel;
    private javax.swing.JButton weightedFilter;
    // End of variables declaration//GEN-END:variables
}
